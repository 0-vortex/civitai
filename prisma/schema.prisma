// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// We aren't using DB sessions, but next-auth likes this... I guess.
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionInvalidation {
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invalidatedAt DateTime @default(now())

  @@id([userId, invalidatedAt])
}

model User {
  id                   Int              @id @default(autoincrement())
  name                 String?
  username             String?          @unique @db.Citext
  // displayName       String?          @db.Citext // [deleted]
  email                String?          @unique
  emailVerified        DateTime?
  image                String?
  showNsfw             Boolean?         @default(false)
  blurNsfw             Boolean?         @default(true)
  isModerator          Boolean?         @default(false)
  tos                  Boolean?         @default(false)
  createdAt            DateTime         @default(now())
  deletedAt            DateTime?
  preferredModelFormat ModelFileFormat? @default(SafeTensor)
  preferredPrunedModel Boolean?         @default(false)

  accounts             Account[]
  sessions             Session[]
  reviews              Review[]
  reviewReactions      ReviewReaction[]
  images               Image[]
  models               Model[]
  activities           UserActivity[]
  saves                SavedModel[]
  imports              Import[]
  keys                 ApiKey[]
  links                UserLink[]
  stats                UserStat?
  rank                 UserRank?
  comments             Comment[]
  commentReactions     CommentReaction[]
  notifications        Notification[]
  notificationSettings UserNotificationSettings[]
  webhooks             Webhook[]
  interests            ModelInterest[]
  engagingUsers        UserEngagement[]           @relation("engagingUsers")
  engagedUsers         UserEngagement[]           @relation("engagedUsers")
  engagedModels        ModelEngagement[]
  engagedModelVersions ModelVersionEngagement[]
  metrics              UserMetric[]
  reports              Report[]
  questions            Question[]
  answers              Answer[]
  commentsv2           CommentV2[]
  questionReactions    QuestionReaction[]
  answerReactions      AnswerReaction[]
  commentV2Reactions   CommentV2Reaction[]
  answerVotes          AnswerVote[]
  downloads            DownloadHistory[]
  tagsEngaged          TagEngagement[]
  SessionInvalidation  SessionInvalidation[]
}

enum UserEngagementType {
  Follow
  Hide
}

model UserEngagement {
  userId       Int
  user         User               @relation("engagingUsers", fields: [userId], references: [id], onDelete: Cascade)
  targetUserId Int
  targetUser   User               @relation("engagedUsers", fields: [targetUserId], references: [id], onDelete: Cascade)
  type         UserEngagementType
  createdAt    DateTime           @default(now())

  @@id([userId, targetUserId])
}

model UserMetric {
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  timeframe         MetricTimeframe
  followingCount    Int             @default(0)
  followerCount     Int             @default(0)
  hiddenCount       Int             @default(0)
  uploadCount       Int             @default(0)
  reviewCount       Int             @default(0)
  answerCount       Int             @default(0)
  answerAcceptCount Int             @default(0)

  @@id([userId, timeframe])
}

enum LinkType {
  Sponsorship
  Social
  Other
}

model UserLink {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url    String
  type   LinkType
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
  AestheticGradient
  LORA
}

enum ImportStatus {
  Pending
  Processing
  Failed
  Completed
}

model Import {
  id         Int          @id @default(autoincrement())
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime     @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  source     String
  status     ImportStatus @default(Pending)
  data       Json?
  parentId   Int?
  parent     Import?      @relation("ImportChildren", fields: [parentId], references: [id], onDelete: SetNull)

  modelVersion ModelVersion[]
  model        Model?
  children     Import[]       @relation("ImportChildren")
  importId     Int?
}

enum ModelStatus {
  Draft
  Published
  Unpublished
  GatherInterest
  Deleted
}

enum CommercialUse {
  None
  Image
  Rent
  Sell
}

enum CheckpointType {
  Trained
  Merge
}

model Model {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  type           ModelType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastVersionAt  DateTime?
  nsfw           Boolean         @default(false)
  tosViolation   Boolean         @default(false)
  poi            Boolean         @default(false)
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  status         ModelStatus     @default(Draft)
  publishedAt    DateTime?
  fromImport     Import?         @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId   Int?            @unique
  meta           Json            @default("{}")
  deletedAt      DateTime?
  checkpointType CheckpointType?

  // Licensing
  allowNoCredit         Boolean       @default(true)
  allowCommercialUse    CommercialUse @default(Sell)
  allowDerivatives      Boolean       @default(true)
  allowDifferentLicense Boolean       @default(true)

  modelVersions ModelVersion[]
  reviews       Review[]
  tagsOnModels  TagsOnModels[]
  metrics       ModelMetric[]
  saves         SavedModel[]
  rank          ModelRank?
  reportStats   ModelReportStat?
  reports       ModelReport[]
  engagements   ModelEngagement[]
  comments      Comment[]
  interests     ModelInterest[]
  downloads     DownloadHistory[]
  licenses      License[]
}

model License {
  id     Int     @id @default(autoincrement())
  name   String
  url    String
  models Model[]
}

model ModelInterest {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, modelId])
}

enum ModelEngagementType {
  Favorite
  Hide
}

model ModelEngagement {
  userId    Int
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model               @relation(fields: [modelId], references: [id], onDelete: Cascade)
  type      ModelEngagementType
  createdAt DateTime            @default(now())

  @@id([userId, modelId])
}

model ModelVersion {
  id                   Int         @id @default(autoincrement())
  index                Int?
  name                 String
  description          String?
  modelId              Int
  model                Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
  trainedWords         String[]
  steps                Int?
  epochs               Int?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  status               ModelStatus @default(Draft)
  fromImport           Import?     @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId         Int?
  inaccurate           Boolean     @default(false)
  baseModel            String?
  meta                 Json        @default("{}")
  earlyAccessTimeFrame Int         @default(0)

  reviews       Review[]
  images        ImagesOnModels[]
  metrics       ModelVersionMetric[]
  rank          ModelVersionRank?
  files         ModelFile[]
  runStrategies RunStrategy[]
  downloads     DownloadHistory[]
  engagements   ModelVersionEngagement[]
}

enum ModelVersionEngagementType {
  Notify
}

model ModelVersionEngagement {
  userId         Int
  user           User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersionId Int
  modelVersion   ModelVersion               @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  type           ModelVersionEngagementType
  createdAt      DateTime                   @default(now())

  @@id([userId, modelVersionId])
}

enum ModelHashType {
  AutoV1
  AutoV2
  SHA256
  CRC32
  BLAKE3
}

model ModelHash {
  file      ModelFile     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int
  type      ModelHashType
  hash      String
  createdAt DateTime      @default(now())

  @@id([fileId, type])
}

enum ScanResultCode {
  Pending
  Success
  Danger
  Error
}

enum ModelFileFormat {
  PickleTensor
  SafeTensor
  Other
}

model ModelFile {
  id                Int             @id @default(autoincrement())
  name              String
  url               String
  sizeKB            Float
  createdAt         DateTime        @default(now())
  type              String          @default("Model")
  format            ModelFileFormat @default(Other)
  modelVersionId    Int
  modelVersion      ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  pickleScanResult  ScanResultCode  @default(Pending)
  exists            Boolean?
  pickleScanMessage String?
  virusScanResult   ScanResultCode  @default(Pending)
  virusScanMessage  String?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  rawScanResult     Json?
  hashes            ModelHash[]

  @@unique([modelVersionId, type, format])
}

enum MetricTimeframe {
  Day
  Week
  Month
  Year
  AllTime
}

model ModelMetric {
  model         Model           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId       Int
  timeframe     MetricTimeframe
  rating        Float           @default(0)
  ratingCount   Int             @default(0)
  downloadCount Int             @default(0)
  favoriteCount Int             @default(0)
  commentCount  Int             @default(0)

  @@id([modelId, timeframe])
}

model ModelVersionMetric {
  modelVersion   ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  timeframe      MetricTimeframe
  rating         Float           @default(0)
  ratingCount    Int             @default(0)
  downloadCount  Int             @default(0)
  favoriteCount  Int             @default(0)
  commentCount   Int             @default(0)

  @@id([modelVersionId, timeframe])
}

enum UserActivityType {
  ModelDownload
  ModelRun
  OtherDownload
  TrainingDataDownload
  HashReport
}

model UserActivity {
  id        Int              @id @default(autoincrement())
  userId    Int?
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  UserActivityType
  details   Json?
  hide      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum ReportReason {
  TOSViolation
  NSFW
  Ownership
  AdminAttention
  Claim
}

enum ReportStatus {
  Pending
  Processing
  Valid
  Invalid
}

model Report {
  id        Int            @id @default(autoincrement())
  userId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime       @default(now())
  details   Json?
  status    ReportStatus
  model     ModelReport?
  review    ReviewReport?
  comment   CommentReport?
}

model ModelReport {
  modelId  Int
  model    Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, modelId])
}

model ReviewReport {
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, reviewId])
}

model CommentReport {
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reportId  Int     @unique
  report    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, commentId])
}

model Review {
  id             Int           @id @default(autoincrement())
  model          Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int?
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  text           String?
  rating         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  nsfw           Boolean       @default(false)
  tosViolation   Boolean       @default(false)
  exclude        Boolean       @default(false)

  reactions       ReviewReaction[]
  imagesOnReviews ImagesOnReviews[]
  reports         ReviewReport[]
  comments        Comment[]
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model ReviewReaction {
  id        Int             @id @default(autoincrement())
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([reviewId, userId, reaction])
}

model Image {
  id           Int      @id @default(autoincrement())
  name         String?
  url          String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  meta         Json?
  hash         String?
  height       Int?
  width        Int?
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  analysis     Json?

  imagesOnModels  ImagesOnModels?
  imagesOnReviews ImagesOnReviews?
}

enum ImageOnModelType {
  Example
  Training
}

model ImagesOnModels {
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int          @unique
  index          Int?

  @@id([imageId, modelVersionId])
}

model ImagesOnReviews {
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  Int    @unique
  index    Int?

  @@id([imageId, reviewId])
}

enum TagTarget {
  Model
  Question
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  target    TagTarget
  unlisted  Boolean   @default(false)

  tagsOnModels   TagsOnModels[]
  TagsOnQuestion TagsOnQuestions[]
  usersEngaged   TagEngagement[]
  metrics        TagMetric[]
  stats          TagStat?
  rank           TagRank?

  @@unique([name, target])
}

model TagMetric {
  tag           Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         Int
  timeframe     MetricTimeframe
  modelCount    Int             @default(0)
  hiddenCount   Int             @default(0)
  followerCount Int             @default(0)

  @@id([tagId, timeframe])
}

model TagsOnModels {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())

  @@id([modelId, tagId])
}

model SavedModel {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([modelId, userId])
}

model RunStrategy {
  id             Int          @id @default(autoincrement())
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  partnerId      Int
  partner        Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime     @default(now())
}

enum PartnerPricingModel {
  Duration
  PerImage
}

model Partner {
  id               Int                 @id @default(autoincrement())
  name             String
  homepage         String?
  tos              String?
  privacy          String?
  startupTime      Int? //Seconds
  onDemand         Boolean
  onDemandStrategy String? // URL Template
  onDemandTypes    ModelType[]         @default([])
  stepsPerSecond   Int
  pricingModel     PartnerPricingModel
  price            String
  about            String?
  createdAt        DateTime            @default(now())
  nsfw             Boolean             @default(false)
  poi              Boolean             @default(false)
  personal         Boolean             @default(false)
  token            String?             @unique
  runStrategies    RunStrategy[]
}

model KeyValue {
  key   String @id
  value Json
}

model ApiKey {
  key       String     @unique
  name      String
  scope     KeyScope[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([key, userId])
}

enum KeyScope {
  Read
  Write
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  parent       Comment? @relation("ParentComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId      Int
  review       Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId     Int?

  comments  Comment[]         @relation("ParentComments")
  reactions CommentReaction[]
  reports   CommentReport[]
}

model CommentReaction {
  id        Int             @id @default(autoincrement())
  commentId Int
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model Log {
  id        String   @id @default(cuid())
  event     String
  details   Json?
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  details   Json?
  createdAt DateTime  @default(now())
  viewedAt  DateTime?
}

model UserNotificationSettings {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String
  disabledAt DateTime @default(now())

  @@unique([userId, type])
}

model Webhook {
  id        Int      @id @default(autoincrement())
  url       String
  notifyOn  String[] // Manually specified and managed since Prisma enums are not supported in arrays
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([url, userId])
}

model Question {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String
  content          String
  selectedAnswerId Int?     @unique
  selectedAnswer   Answer?  @relation("SelectedAnswer", fields: [selectedAnswerId], references: [id])

  tags      TagsOnQuestions[]
  reactions QuestionReaction[]
  comments  QuestionComment[]
  answers   Answer[]           @relation("Question")
  metrics   QuestionMetric[]
  rank      QuestionRank?
}

model QuestionMetric {
  questionId   Int
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  heartCount   Int             @default(0)
  commentCount Int             @default(0)
  answerCount  Int             @default(0)

  @@id([questionId, timeframe])
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation("Question", fields: [questionId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reactions AnswerReaction[]
  comments  AnswerComment[]
  metrics   AnswerMetric[]
  answerFor Question?        @relation("SelectedAnswer")
  rank      AnswerRank?
  votes     AnswerVote[]
}

model AnswerVote {
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  vote      Boolean?
  createdAt DateTime @default(now())

  @@id([answerId, userId])
}

model AnswerMetric {
  answerId     Int
  answer       Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  checkCount   Int
  crossCount   Int
  heartCount   Int
  commentCount Int

  @@id([answerId, timeframe])
}

model CommentV2 {
  id           Int         @id @default(autoincrement())
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  nsfw         Boolean     @default(false)
  tosViolation Boolean     @default(false)
  parentId     Int?
  parent       CommentV2?  @relation("ParentComments", fields: [parentId], references: [id], onDelete: Cascade)
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     CommentV2[] @relation("ParentComments")

  question  QuestionComment?
  answer    AnswerComment?
  reactions CommentV2Reaction[]
}

model QuestionComment {
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  commentId  Int       @unique
  comment    CommentV2 @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([questionId, commentId])
}

model AnswerComment {
  answerId  Int
  answer    Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  commentId Int       @unique
  comment   CommentV2 @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([answerId, commentId])
}

model TagsOnQuestions {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int

  @@id([tagId, questionId])
}

model QuestionReaction {
  id         Int             @id @default(autoincrement())
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  reaction   ReviewReactions
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([questionId, userId, reaction])
}

model AnswerReaction {
  id        Int             @id @default(autoincrement())
  answer    Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([answerId, userId, reaction])
}

model CommentV2Reaction {
  id        Int             @id @default(autoincrement())
  comment   CommentV2       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

enum TagEngagementType {
  Hide
  Follow
}

model TagEngagement {
  userId    Int
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  type      TagEngagementType
  createdAt DateTime          @default(now())

  @@id([userId, tagId])
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  emoji     String?
  color     String    @default("blue")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  startsAt  DateTime?
  endsAt    DateTime?
}

/// @view
model QuestionRank {
  questionId              Int      @id
  question                Question @relation(fields: [questionId], references: [id], onDelete: NoAction)
  answerCountDay          Int
  answerCountWeek         Int
  answerCountMonth        Int
  answerCountYear         Int
  answerCountAllTime      Int
  heartCountDay           Int
  heartCountWeek          Int
  heartCountMonth         Int
  heartCountYear          Int
  heartCountAllTime       Int
  commentCountDay         Int
  commentCountWeek        Int
  commentCountMonth       Int
  commentCountYear        Int
  commentCountAllTime     Int
  answerCountDayRank      Int
  answerCountWeekRank     Int
  answerCountMonthRank    Int
  answerCountYearRank     Int
  answerCountAllTimeRank  Int
  heartCountDayRank       Int
  heartCountWeekRank      Int
  heartCountMonthRank     Int
  heartCountYearRank      Int
  heartCountAllTimeRank   Int
  commentCountDayRank     Int
  commentCountWeekRank    Int
  commentCountMonthRank   Int
  commentCountYearRank    Int
  commentCountAllTimeRank Int
}

/// @view
model AnswerRank {
  answerId                Int    @id
  answer                  Answer @relation(fields: [answerId], references: [id], onDelete: NoAction)
  checkCountDay           Int
  checkCountWeek          Int
  checkCountMonth         Int
  checkCountYear          Int
  checkCountAllTime       Int
  crossCountDay           Int
  crossCountWeek          Int
  crossCountMonth         Int
  crossCountYear          Int
  crossCountAllTime       Int
  heartCountDay           Int
  heartCountWeek          Int
  heartCountMonth         Int
  heartCountYear          Int
  heartCountAllTime       Int
  commentCountDay         Int
  commentCountWeek        Int
  commentCountMonth       Int
  commentCountYear        Int
  commentCountAllTime     Int
  checkCountDayRank       Int
  checkCountWeekRank      Int
  checkCountMonthRank     Int
  checkCountYearRank      Int
  checkCountAllTimeRank   Int
  crossCountDayRank       Int
  crossCountWeekRank      Int
  crossCountMonthRank     Int
  crossCountYearRank      Int
  crossCountAllTimeRank   Int
  heartCountDayRank       Int
  heartCountWeekRank      Int
  heartCountMonthRank     Int
  heartCountYearRank      Int
  heartCountAllTimeRank   Int
  commentCountDayRank     Int
  commentCountWeekRank    Int
  commentCountMonthRank   Int
  commentCountYearRank    Int
  commentCountAllTimeRank Int
}

/// @view
model ModelRank {
  model                    Model @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId                  Int   @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  favoriteCountDay         Int
  favoriteCountWeek        Int
  favoriteCountMonth       Int
  favoriteCountYear        Int
  favoriteCountAllTime     Int
  commentCountDay          Int
  commentCountWeek         Int
  commentCountMonth        Int
  commentCountYear         Int
  commentCountAllTime      Int
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
  favoriteCountDayRank     Int
  favoriteCountWeekRank    Int
  favoriteCountMonthRank   Int
  favoriteCountYearRank    Int
  favoriteCountAllTimeRank Int
  commentCountDayRank      Int
  commentCountWeekRank     Int
  commentCountMonthRank    Int
  commentCountYearRank     Int
  commentCountAllTimeRank  Int
  newRank                  Int
}

/// @view
model ModelReportStat {
  model                 Model @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId               Int   @id
  tosViolationPending   Int
  tosViolationValid     Int
  tosViolationInvalid   Int
  nsfwPending           Int
  nsfwValid             Int
  nsfwInvalid           Int
  ownershipPending      Int
  ownershipProcessing   Int
  ownershipValid        Int
  ownershipInvalid      Int
  adminAttentionPending Int
  adminAttentionValid   Int
  adminAttentionInvalid Int
  claimPending          Int
  claimValid            Int
  claimInvalid          Int
}

/// @view
model ModelVersionRank {
  modelVersion             ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: NoAction)
  modelVersionId           Int          @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
}

/// @view
model UserStat {
  user                     User  @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId                   Int   @id
  uploadCountDay           Int
  uploadCountWeek          Int
  uploadCountMonth         Int
  uploadCountYear          Int
  uploadCountAllTime       Int
  reviewCountDay           Int
  reviewCountWeek          Int
  reviewCountMonth         Int
  reviewCountYear          Int
  reviewCountAllTime       Int
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  followingCountDay        Int
  followingCountWeek       Int
  followingCountMonth      Int
  followingCountYear       Int
  followingCountAllTime    Int
  followerCountDay         Int
  followerCountWeek        Int
  followerCountMonth       Int
  followerCountYear        Int
  followerCountAllTime     Int
  hiddenCountDay           Int
  hiddenCountWeek          Int
  hiddenCountMonth         Int
  hiddenCountYear          Int
  hiddenCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  favoriteCountDay         Int
  favoriteCountWeek        Int
  favoriteCountMonth       Int
  favoriteCountYear        Int
  favoriteCountAllTime     Int
  answerCountDay           Int
  answerCountWeek          Int
  answerCountMonth         Int
  answerCountYear          Int
  answerCountAllTime       Int
  answerAcceptCountDay     Int
  answerAcceptCountWeek    Int
  answerAcceptCountMonth   Int
  answerAcceptCountYear    Int
  answerAcceptCountAllTime Int
}

/// @view
model UserRank {
  user                         User @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId                       Int  @id
  downloadCountDayRank         Int
  downloadCountWeekRank        Int
  downloadCountMonthRank       Int
  downloadCountYearRank        Int
  downloadCountAllTimeRank     Int
  ratingCountDayRank           Int
  ratingCountWeekRank          Int
  ratingCountMonthRank         Int
  ratingCountYearRank          Int
  ratingCountAllTimeRank       Int
  followerCountDayRank         Int
  followerCountWeekRank        Int
  followerCountMonthRank       Int
  followerCountYearRank        Int
  followerCountAllTimeRank     Int
  ratingDayRank                Int
  ratingWeekRank               Int
  ratingMonthRank              Int
  ratingYearRank               Int
  ratingAllTimeRank            Int
  favoriteCountDayRank         Int
  favoriteCountWeekRank        Int
  favoriteCountMonthRank       Int
  favoriteCountYearRank        Int
  favoriteCountAllTimeRank     Int
  answerCountDayRank           Int
  answerCountWeekRank          Int
  answerCountMonthRank         Int
  answerCountYearRank          Int
  answerCountAllTimeRank       Int
  answerAcceptCountDayRank     Int
  answerAcceptCountWeekRank    Int
  answerAcceptCountMonthRank   Int
  answerAcceptCountYearRank    Int
  answerAcceptCountAllTimeRank Int
  leaderboardRank              Int
}

/// @view
model TagStat {
  tag                  Tag @relation(fields: [tagId], references: [id], onDelete: NoAction)
  tagId                Int @id
  followerCountDay     Int
  followerCountWeek    Int
  followerCountMonth   Int
  followerCountYear    Int
  followerCountAllTime Int
  hiddenCountDay       Int
  hiddenCountWeek      Int
  hiddenCountMonth     Int
  hiddenCountYear      Int
  hiddenCountAllTime   Int
  modelCountDay        Int
  modelCountWeek       Int
  modelCountMonth      Int
  modelCountYear       Int
  modelCountAllTime    Int
}

/// @view
model TagRank {
  tag                      Tag @relation(fields: [tagId], references: [id], onDelete: NoAction)
  tagId                    Int @id
  followerCountDayRank     Int
  followerCountWeekRank    Int
  followerCountMonthRank   Int
  followerCountYearRank    Int
  followerCountAllTimeRank Int
  hiddenCountDayRank       Int
  hiddenCountWeekRank      Int
  hiddenCountMonthRank     Int
  hiddenCountYearRank      Int
  hiddenCountAllTimeRank   Int
  modelCountDayRank        Int
  modelCountWeekRank       Int
  modelCountMonthRank      Int
  modelCountYearRank       Int
  modelCountAllTimeRank    Int
}

/// @view
model DownloadHistory {
  id             Int          @id
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: NoAction)
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: NoAction)
  modelId        Int
  model          Model        @relation(fields: [modelId], references: [id], onDelete: NoAction)
  createdAt      DateTime
}
