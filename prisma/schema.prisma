// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  metadata          Json    @default("{}")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// We aren't using DB sessions, but next-auth likes this... I guess.
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionInvalidation {
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invalidatedAt DateTime @default(now())

  @@id([userId, invalidatedAt])
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String?
  username             String?               @unique @db.Citext
  // displayName       String?          @db.Citext // [deleted]
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  showNsfw             Boolean?              @default(false)
  blurNsfw             Boolean?              @default(true)
  isModerator          Boolean?              @default(false)
  tos                  Boolean?              @default(false)
  onboarded            Boolean?              @default(false)
  createdAt            DateTime              @default(now())
  deletedAt            DateTime?
  preferredModelFormat ModelFileFormat?      @default(SafeTensor)
  preferredPrunedModel Boolean?              @default(false)
  customerId           String?               @unique
  subscriptionId       String?
  subscription         CustomerSubscription?
  muted                Boolean?              @default(false)
  bannedAt             DateTime?
  autoplayGifs         Boolean?              @default(true)

  accounts             Account[]
  sessions             Session[]
  reviews              Review[]
  reviewReactions      ReviewReaction[]
  images               Image[]
  models               Model[]                    @relation("creator")
  deletedModels        Model[]                    @relation("deletedBy")
  activities           UserActivity[]
  saves                SavedModel[]
  imports              Import[]
  keys                 ApiKey[]
  links                UserLink[]
  comments             Comment[]
  commentReactions     CommentReaction[]
  notifications        Notification[]
  notificationSettings UserNotificationSettings[]
  webhooks             Webhook[]
  interests            ModelInterest[]
  engagingUsers        UserEngagement[]           @relation("engagingUsers")
  engagedUsers         UserEngagement[]           @relation("engagedUsers")
  engagedModels        ModelEngagement[]
  engagedModelVersions ModelVersionEngagement[]
  metrics              UserMetric[]
  reports              Report[]
  questions            Question[]
  answers              Answer[]
  commentsv2           CommentV2[]
  questionReactions    QuestionReaction[]
  answerReactions      AnswerReaction[]
  commentV2Reactions   CommentV2Reaction[]
  answerVotes          AnswerVote[]
  tagsEngaged          TagEngagement[]

  imageReactions      ImageReaction[]
  sessionInvalidation SessionInvalidation[]
  purchases           Purchase[]
  cosmetics           UserCosmetic[]
  postReactions       PostReaction[]
  posts               Post[]
  resourceReviews     ResourceReview[]
}

model CustomerSubscription {
  id                 String    @id
  userId             Int       @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata           Json
  status             String
  priceId            String
  price              Price     @relation(fields: [priceId], references: [id])
  productId          String
  product            Product   @relation(fields: [productId], references: [id])
  cancelAtPeriodEnd  Boolean
  cancelAt           DateTime?
  canceledAt         DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime
  endedAt            DateTime?
  updatedAt          DateTime?
}

model Product {
  id             String  @id
  active         Boolean
  name           String
  description    String?
  metadata       Json
  defaultPriceId String?

  prices                Price[]
  customerSubscriptions CustomerSubscription[]
  purchases             Purchase[]
}

model Price {
  id                    String                 @id
  productId             String
  product               Product                @relation(fields: [productId], references: [id])
  active                Boolean
  currency              String
  description           String?
  type                  String
  unitAmount            Int?
  interval              String?
  intervalCount         Int?
  metadata              Json
  customerSubscriptions CustomerSubscription[]
  purchases             Purchase[]
}

model Purchase {
  id         Int      @id @default(autoincrement())
  customerId String
  customer   User     @relation(fields: [customerId], references: [customerId])
  productId  String?
  product    Product? @relation(fields: [productId], references: [id])
  priceId    String?
  price      Price?   @relation(fields: [priceId], references: [id])
  status     String?
  createdAt  DateTime @default(now())
}

enum UserEngagementType {
  Follow
  Hide
}

model UserEngagement {
  userId       Int
  user         User               @relation("engagingUsers", fields: [userId], references: [id], onDelete: Cascade)
  targetUserId Int
  targetUser   User               @relation("engagedUsers", fields: [targetUserId], references: [id], onDelete: Cascade)
  type         UserEngagementType
  createdAt    DateTime           @default(now())

  @@id([userId, targetUserId])
}

model UserMetric {
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  timeframe         MetricTimeframe
  followingCount    Int             @default(0)
  followerCount     Int             @default(0)
  hiddenCount       Int             @default(0)
  uploadCount       Int             @default(0)
  reviewCount       Int             @default(0)
  answerCount       Int             @default(0)
  answerAcceptCount Int             @default(0)

  @@id([userId, timeframe])
}

enum LinkType {
  Sponsorship
  Social
  Other
}

model UserLink {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url    String
  type   LinkType
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
  AestheticGradient
  LORA
  LoCon
  Controlnet
  Poses
  Wildcards
  Other
}

enum ImportStatus {
  Pending
  Processing
  Failed
  Completed
}

model Import {
  id         Int          @id @default(autoincrement())
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime     @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  source     String
  status     ImportStatus @default(Pending)
  data       Json?
  parentId   Int?
  parent     Import?      @relation("ImportChildren", fields: [parentId], references: [id], onDelete: SetNull)

  modelVersion ModelVersion[]
  model        Model?
  children     Import[]       @relation("ImportChildren")
  importId     Int?
}

enum ModelStatus {
  Draft
  Published
  Unpublished
  GatherInterest
  Deleted
}

enum CommercialUse {
  None
  Image
  Rent
  Sell
}

enum CheckpointType {
  Trained
  Merge
}

model Model {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  type           ModelType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastVersionAt  DateTime?
  nsfw           Boolean         @default(false)
  tosViolation   Boolean         @default(false)
  poi            Boolean         @default(false)
  userId         Int
  user           User            @relation("creator", fields: [userId], references: [id])
  status         ModelStatus     @default(Draft)
  publishedAt    DateTime?
  fromImport     Import?         @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId   Int?            @unique
  meta           Json            @default("{}")
  deletedAt      DateTime?
  deletedBy      Int?
  deletedByUser  User?           @relation("deletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  checkpointType CheckpointType?
  locked         Boolean         @default(false)
  underAttack    Boolean         @default(false)

  // Licensing
  allowNoCredit         Boolean       @default(true)
  allowCommercialUse    CommercialUse @default(Sell)
  allowDerivatives      Boolean       @default(true)
  allowDifferentLicense Boolean       @default(true)

  modelVersions ModelVersion[]
  reviews       Review[]
  tagsOnModels  TagsOnModels[]
  metrics       ModelMetric[]
  saves         SavedModel[]
  reports       ModelReport[]
  engagements   ModelEngagement[]
  comments      Comment[]
  interests     ModelInterest[]
  licenses      License[]
}

model License {
  id     Int     @id @default(autoincrement())
  name   String
  url    String
  models Model[]
}

model ModelInterest {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, modelId])
}

enum ModelEngagementType {
  Favorite
  Hide
}

model ModelEngagement {
  userId    Int
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model               @relation(fields: [modelId], references: [id], onDelete: Cascade)
  type      ModelEngagementType
  createdAt DateTime            @default(now())

  @@id([userId, modelId])
  @@index([modelId], type: Hash)
}

model ModelVersion {
  id                   Int         @id @default(autoincrement())
  index                Int?
  name                 String
  description          String?
  modelId              Int
  model                Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
  trainedWords         String[]
  steps                Int?
  epochs               Int?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  status               ModelStatus @default(Draft)
  fromImport           Import?     @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId         Int?
  inaccurate           Boolean     @default(false)
  baseModel            String?
  meta                 Json        @default("{}")
  earlyAccessTimeFrame Int         @default(0)

  reviews         Review[]
  images          ImagesOnModels[]
  metrics         ModelVersionMetric[]
  files           ModelFile[]
  runStrategies   RunStrategy[]
  engagements     ModelVersionEngagement[]
  imageResources  ImageResource[]
  posts           Post[]
  resourceReviews ResourceReview[]

  @@index([modelId], type: Hash)
}

enum ModelVersionEngagementType {
  Notify
}

model ModelVersionEngagement {
  userId         Int
  user           User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersionId Int
  modelVersion   ModelVersion               @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  type           ModelVersionEngagementType
  createdAt      DateTime                   @default(now())

  @@id([userId, modelVersionId])
}

enum ModelHashType {
  AutoV1
  AutoV2
  SHA256
  CRC32
  BLAKE3
}

model ModelFileHash {
  file      ModelFile     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int
  type      ModelHashType
  hash      String
  createdAt DateTime      @default(now())

  @@id([fileId, type])
}

enum ScanResultCode {
  Pending
  Success
  Danger
  Error
}

enum ModelFileFormat {
  PickleTensor
  SafeTensor
  Other
}

model ModelFile {
  id                Int             @id @default(autoincrement())
  name              String
  url               String
  sizeKB            Float
  createdAt         DateTime        @default(now())
  type              String          @default("Model")
  format            ModelFileFormat @default(Other)
  modelVersionId    Int
  modelVersion      ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  pickleScanResult  ScanResultCode  @default(Pending)
  exists            Boolean?
  pickleScanMessage String?
  virusScanResult   ScanResultCode  @default(Pending)
  virusScanMessage  String?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  rawScanResult     Json?
  hashes            ModelFileHash[]

  @@index([modelVersionId], type: Hash)
}

enum MetricTimeframe {
  Day
  Week
  Month
  Year
  AllTime
}

model ModelMetric {
  model         Model           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId       Int
  timeframe     MetricTimeframe
  rating        Float           @default(0)
  ratingCount   Int             @default(0)
  downloadCount Int             @default(0)
  favoriteCount Int             @default(0)
  commentCount  Int             @default(0)

  @@id([modelId, timeframe])
}

model ModelVersionMetric {
  modelVersion   ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  timeframe      MetricTimeframe
  rating         Float           @default(0)
  ratingCount    Int             @default(0)
  downloadCount  Int             @default(0)
  favoriteCount  Int             @default(0)
  commentCount   Int             @default(0)

  @@id([modelVersionId, timeframe])
}

enum UserActivityType {
  ModelDownload
  ModelRun
  OtherDownload
  TrainingDataDownload
  HashReport
}

model UserActivity {
  id        Int              @id @default(autoincrement())
  userId    Int?
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  UserActivityType
  details   Json?
  hide      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId, createdAt])
}

enum ReportReason {
  TOSViolation
  NSFW
  Ownership
  AdminAttention
  Claim
}

enum ReportStatus {
  Pending
  Processing
  Actioned
  Unactioned
}

model Report {
  id                      Int          @id @default(autoincrement())
  userId                  Int
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason                  ReportReason
  createdAt               DateTime     @default(now())
  details                 Json?
  internalNotes           String?
  previouslyReviewedCount Int          @default(0)
  alsoReportedBy          Int[]        @default([]) // UserIds

  status    ReportStatus
  model     ModelReport?
  review    ReviewReport?
  comment   CommentReport?
  commentV2 CommentV2Report?
  image     ImageReport?
}

model ModelReport {
  modelId  Int
  model    Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, modelId])
}

model ReviewReport {
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, reviewId])
}

model CommentReport {
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reportId  Int     @unique
  report    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, commentId])
}

model CommentV2Report {
  commentV2Id Int
  commentV2   CommentV2 @relation(fields: [commentV2Id], references: [id], onDelete: Cascade)
  reportId    Int       @unique
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@id([reportId, commentV2Id])
}

model ImageReport {
  imageId  Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  reportId Int    @unique
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Review {
  id             Int           @id @default(autoincrement())
  model          Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: SetNull)
  modelVersionId Int?
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  text           String?
  rating         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  nsfw           Boolean       @default(false)
  tosViolation   Boolean       @default(false)
  exclude        Boolean       @default(false)
  locked         Boolean       @default(false)

  reactions       ReviewReaction[]
  imagesOnReviews ImagesOnReviews[]
  reports         ReviewReport[]
  comments        Comment[]

  @@index([modelId], type: Hash)
}

model ResourceReview {
  id             Int          @id @default(autoincrement())
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  rating         Int
  details        String?
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread         Thread?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([modelVersionId, userId])
  @@index([modelVersionId], type: Hash)
  @@index([userId], type: Hash)
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model ReviewReaction {
  id        Int             @id @default(autoincrement())
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([reviewId, userId, reaction])
}

model Post {
  id             Int           @id @default(autoincrement())
  nsfw           Boolean       @default(false)
  title          String?
  detail         String?
  userId         Int
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelVersionId Int?
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: SetNull)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  publishedAt    DateTime?

  images    Image[]
  tags      TagsOnPost[]
  reactions PostReaction[]
  thread    Thread?
  metrics   PostMetric[]
}

model PostMetric {
  postId       Int
  post         Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  likeCount    Int             @default(0)
  dislikeCount Int             @default(0)
  laughCount   Int             @default(0)
  cryCount     Int             @default(0)
  heartCount   Int             @default(0)
  commentCount Int             @default(0)

  @@id([postId, timeframe])
}

enum ImageGenerationProcess {
  txt2img
  txt2imgHiRes
  img2img
  inpainting
}

model Image {
  id                Int                     @id @default(autoincrement())
  name              String?
  url               String
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  meta              Json?
  hash              String?
  height            Int?
  width             Int?
  nsfw              Boolean                 @default(false)
  tosViolation      Boolean                 @default(false)
  analysis          Json?
  generationProcess ImageGenerationProcess?
  featuredAt        DateTime?
  postId            Int?
  post              Post?                   @relation(fields: [postId], references: [id], onDelete: SetNull)
  needsReview       Boolean                 @default(false)
  hideMeta          Boolean                 @default(false)
  index             Int?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  mimeType          String?
  sizeKB            Int?

  imagesOnModels  ImagesOnModels?
  imagesOnReviews ImagesOnReviews?
  reports         ImageReport[]
  reactions       ImageReaction[]
  thread          Thread?
  tags            TagsOnImage[]
  metrics         ImageMetric[]
  resources       ImageResource[]

  @@index([featuredAt])
  @@index([postId], type: Hash)
}

model ImageResource {
  id             Int           @id @default(autoincrement())
  modelVersionId Int?
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  name           String?
  imageId        Int
  image          Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  detected       Boolean       @default(false)

  @@unique([modelVersionId, name, imageId])
  @@index([imageId], type: Hash)
}

model ImageMetric {
  image        Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId      Int
  timeframe    MetricTimeframe
  likeCount    Int             @default(0)
  dislikeCount Int             @default(0)
  laughCount   Int             @default(0)
  cryCount     Int             @default(0)
  heartCount   Int             @default(0)
  commentCount Int             @default(0)

  @@id([imageId, timeframe])
}

enum ImageOnModelType {
  Example
  Training
}

model ImagesOnModels {
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int          @unique
  index          Int?

  @@id([imageId, modelVersionId])
  @@index([modelVersionId], type: Hash)
}

model ImagesOnReviews {
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  Int    @unique
  index    Int?

  @@id([imageId, reviewId])
  @@index([reviewId], type: Hash)
}

enum TagTarget {
  Model
  Question
  Image
  Post
}

enum TagType {
  UserGenerated
  Label
  Moderation
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String
  color      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  target     TagTarget[]
  type       TagType     @default(UserGenerated)
  unlisted   Boolean     @default(false)
  unfeatured Boolean     @default(false)
  isCategory Boolean     @default(false)

  tagsOnModels   TagsOnModels[]
  tagsOnQuestion TagsOnQuestions[]
  tagsOnImage    TagsOnImage[]
  tagsOnPosts    TagsOnPost[]
  usersEngaged   TagEngagement[]
  metrics        TagMetric[]

  @@unique([name])
}

model TagsOnModels {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())

  @@id([modelId, tagId])
  @@index([modelId], type: Hash)
}

model TagsOnQuestions {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int

  @@id([tagId, questionId])
  @@index([questionId], type: Hash)
}

model TagsOnImage {
  imageId    Int
  image      Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  automated  Boolean  @default(false)
  confidence Int?

  @@id([tagId, imageId])
  @@index([imageId], type: Hash)
  @@index([automated], type: Hash)
}

model TagsOnPost {
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([tagId, postId])
  @@index([postId], type: Hash)
}

model TagMetric {
  tag           Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         Int
  timeframe     MetricTimeframe
  modelCount    Int             @default(0)
  imageCount    Int             @default(0)
  postCount     Int             @default(0)
  hiddenCount   Int             @default(0)
  followerCount Int             @default(0)

  @@id([tagId, timeframe])
}

model SavedModel {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([modelId, userId])
}

model RunStrategy {
  id             Int          @id @default(autoincrement())
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  partnerId      Int
  partner        Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime     @default(now())
}

enum PartnerPricingModel {
  Duration
  PerImage
}

model Partner {
  id               Int                 @id @default(autoincrement())
  name             String
  homepage         String?
  tos              String?
  privacy          String?
  startupTime      Int? //Seconds
  onDemand         Boolean
  onDemandStrategy String? // URL Template
  onDemandTypes    ModelType[]         @default([])
  stepsPerSecond   Int
  pricingModel     PartnerPricingModel
  price            String
  about            String?
  createdAt        DateTime            @default(now())
  nsfw             Boolean             @default(false)
  poi              Boolean             @default(false)
  personal         Boolean             @default(false)
  token            String?             @unique
  runStrategies    RunStrategy[]
}

model KeyValue {
  key   String @id
  value Json
}

model ApiKey {
  id        Int        @id @default(autoincrement())
  key       String     @unique
  name      String
  scope     KeyScope[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
}

enum KeyScope {
  Read
  Write
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  parent       Comment? @relation("ParentComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId      Int
  review       Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId     Int?
  locked       Boolean? @default(false)

  comments  Comment[]         @relation("ParentComments")
  reactions CommentReaction[]
  reports   CommentReport[]

  @@index([modelId], type: Hash)
  @@index([reviewId], type: Hash)
  @@index([parentId], type: Hash)
}

model CommentReaction {
  id        Int             @id @default(autoincrement())
  commentId Int
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model Log {
  id        String   @id @default(cuid())
  event     String
  details   Json?
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  details   Json?
  createdAt DateTime  @default(now())
  viewedAt  DateTime?

  @@index([userId])
}

model UserNotificationSettings {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String
  disabledAt DateTime @default(now())

  @@unique([userId, type])
}

model Webhook {
  id        Int      @id @default(autoincrement())
  url       String
  notifyOn  String[] // Manually specified and managed since Prisma enums are not supported in arrays
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([url, userId])
}

model Question {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String
  content          String
  selectedAnswerId Int?     @unique
  selectedAnswer   Answer?  @relation("SelectedAnswer", fields: [selectedAnswerId], references: [id])

  tags      TagsOnQuestions[]
  reactions QuestionReaction[]
  answers   Answer[]           @relation("Question")
  metrics   QuestionMetric[]
  thread    Thread?
}

model QuestionMetric {
  questionId   Int
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  heartCount   Int             @default(0)
  commentCount Int             @default(0)
  answerCount  Int             @default(0)

  @@id([questionId, timeframe])
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation("Question", fields: [questionId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reactions AnswerReaction[]
  metrics   AnswerMetric[]
  answerFor Question?        @relation("SelectedAnswer")
  votes     AnswerVote[]
  thread    Thread?
}

model AnswerVote {
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  vote      Boolean?
  createdAt DateTime @default(now())

  @@id([answerId, userId])
}

model MetricUpdateQueue {
  type      String
  id        Int
  createdAt DateTime @default(now())

  @@id([type, id])
}

model AnswerMetric {
  answerId     Int
  answer       Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  timeframe    MetricTimeframe
  checkCount   Int
  crossCount   Int
  heartCount   Int
  commentCount Int

  @@id([answerId, timeframe])
}

model CommentV2 {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId     Int
  thread       Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  reactions CommentV2Reaction[]
  reports   CommentV2Report[]

  @@index([threadId], type: Hash)
}

model Thread {
  id     Int     @id @default(autoincrement())
  locked Boolean @default(false)

  questionId Int?            @unique
  question   Question?       @relation(fields: [questionId], references: [id], onDelete: SetNull)
  answerId   Int?            @unique
  answer     Answer?         @relation(fields: [answerId], references: [id], onDelete: SetNull)
  imageId    Int?            @unique
  image      Image?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
  postId     Int?            @unique
  post       Post?           @relation(fields: [postId], references: [id], onDelete: SetNull)
  reviewId   Int?            @unique
  review     ResourceReview? @relation(fields: [reviewId], references: [id], onDelete: SetNull)

  comments CommentV2[]

  @@index([reviewId], type: Hash)
  @@index([postId], type: Hash)
  @@index([questionId], type: Hash)
  @@index([imageId], type: Hash)
}

model QuestionReaction {
  id         Int             @id @default(autoincrement())
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  reaction   ReviewReactions
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([questionId, userId, reaction])
}

model AnswerReaction {
  id        Int             @id @default(autoincrement())
  answer    Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([answerId, userId, reaction])
}

model CommentV2Reaction {
  id        Int             @id @default(autoincrement())
  comment   CommentV2       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model ImageReaction {
  id        Int             @id @default(autoincrement())
  imageId   Int
  image     Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([imageId, userId, reaction])
}

model PostReaction {
  id        Int             @id @default(autoincrement())
  postId    Int
  post      Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([postId, userId, reaction])
}

enum TagEngagementType {
  Hide
  Follow
  Allow
}

model TagEngagement {
  userId    Int
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  type      TagEngagementType
  createdAt DateTime          @default(now())

  @@id([userId, tagId])
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  emoji     String?
  color     String    @default("blue")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  startsAt  DateTime?
  endsAt    DateTime?
}

enum CosmeticType {
  Badge
  NamePlate
}

enum CosmeticSource {
  Trophy
  Purchase
  Event
  Membership
}

model Cosmetic {
  id              Int            @id @default(autoincrement())
  name            String
  description     String?
  type            CosmeticType
  source          CosmeticSource
  permanentUnlock Boolean
  data            Json
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  availableStart  DateTime?
  availableEnd    DateTime?
  productId       String?
  UserCosmetic    UserCosmetic[]
}

model UserCosmetic {
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cosmeticId Int
  cosmetic   Cosmetic  @relation(fields: [cosmeticId], references: [id], onDelete: Cascade)
  obtainedAt DateTime  @default(now()) // createdAt
  equippedAt DateTime?

  @@id([userId, cosmeticId])
}
