// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             Int              @id @default(autoincrement())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Review         Review[]
  ReviewReaction ReviewReaction[]
  Image          Image[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
}

model Model {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  type         ModelType
  trainedWords String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nsfw         Boolean   @default(false)

  ModelVersions  ModelVersion[]
  Reviews        Review[]
  ImagesOnModels ImagesOnModels[]
  TagsOnModels   TagsOnModels[]
}

model ModelVersion {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  url            String
  sizeKB         Int
  model          Model            @relation(fields: [modelId], references: [id])
  modelId        Int
  steps          Int?
  epochs         Int?
  Review         Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ImagesOnModels ImagesOnModels[]
}

model Review {
  id              Int               @id @default(autoincrement())
  model           Model             @relation(fields: [modelId], references: [id])
  modelId         Int
  modelVersion    ModelVersion?     @relation(fields: [modelVersionId], references: [id])
  modelVersionId  Int?
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  text            String
  rating          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  nsfw            Boolean           @default(false)
  ReviewReactions ReviewReaction[]
  ImagesOnReviews ImagesOnReviews[]
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model ReviewReaction {
  id        Int             @id @default(autoincrement())
  review    Review          @relation(fields: [reviewId], references: [id])
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Image {
  id              Int               @id @default(autoincrement())
  name            String?
  url             String
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  prompt          String?
  hash            String?
  height          String?
  width           String?
  nsfw            Boolean           @default(false)
  ImagesOnModels  ImagesOnModels[]
  ImagesOnReviews ImagesOnReviews[]
}

enum ImageOnModelType {
  Example
  Training
}

model ImagesOnModels {
  model          Model            @relation(fields: [modelId], references: [id])
  modelId        Int
  modelVersion   ModelVersion     @relation(fields: [modelVersionId], references: [id])
  modelVersionId Int
  image          Image            @relation(fields: [imageId], references: [id])
  imageId        Int
  type           ImageOnModelType

  @@id([imageId, modelId, modelVersionId])
}

model ImagesOnReviews {
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId Int
  image    Image  @relation(fields: [imageId], references: [id])
  imageId  Int

  @@id([imageId, reviewId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TagsOnModels TagsOnModels[]
}

model TagsOnModels {
  model   Model @relation(fields: [modelId], references: [id])
  modelId Int
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([modelId, tagId])
}
