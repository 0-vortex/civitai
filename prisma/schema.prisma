// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByNulls", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique @db.Citext
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  showNsfw      Boolean?  @default(false)
  blurNsfw      Boolean?  @default(true)
  isModerator   Boolean?  @default(false)
  tos           Boolean?  @default(false)

  accounts        Account[]
  sessions        Session[]
  reviews         Review[]
  reviewReactions ReviewReaction[]
  images          Image[]
  models          Model[]
  activities      UserActivity[]
  saves           SavedModel[]
  modelReports    ModelReport[]
  reviewReports   ReviewReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
  AestheticGradient
}

model Model {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  type         ModelType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nsfw         Boolean   @default(false)
  tosViolation Boolean   @default(false)
  userId       Int
  user         User      @relation(fields: [userId], references: [id])

  modelVersions ModelVersion[]
  reviews       Review[]
  tagsOnModels  TagsOnModels[]
  metrics       ModelMetric[]
  saves         SavedModel[]
  rank          ModelRank?
  reports       ModelReport[]
}

model ModelVersion {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  modelId      Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  trainedWords String[]
  steps        Int?
  epochs       Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  reviews Review[]
  images  ImagesOnModels[]
  metrics ModelVersionMetric[]
  rank    ModelVersionRank?
  files   ModelFile[]
}

enum ScanResultCode {
  Pending
  Success
  Danger
  Error
}

enum ModelFileType {
  Model
  TrainingData
}

model ModelFile {
  name              String
  url               String
  sizeKB            Float
  createdAt         DateTime       @default(now())
  type              ModelFileType
  modelVersionId    Int
  modelVersion      ModelVersion   @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  pickleScanResult  ScanResultCode @default(Pending)
  pickleScanMessage String?
  virusScanResult   ScanResultCode @default(Pending)
  virusScanMessage  String?
  scannedAt         DateTime?
  rawScanResult     Json?

  @@id([modelVersionId, type])
}

enum MetricTimeframe {
  Day
  Week
  Month
  Year
  AllTime
}

model ModelMetric {
  model         Model           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId       Int
  timeframe     MetricTimeframe
  rating        Float
  ratingCount   Int
  downloadCount Int

  @@id([modelId, timeframe])
}

model ModelVersionMetric {
  modelVersion   ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  timeframe      MetricTimeframe
  rating         Float
  ratingCount    Int
  downloadCount  Int

  @@id([modelVersionId, timeframe])
}

enum UserActivityType {
  ModelDownload
  TrainingDataDownload
}

model UserActivity {
  id        Int              @id @default(autoincrement())
  userId    Int?
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  UserActivityType
  details   Json?
  createdAt DateTime         @default(now())
}

enum ReportReason {
  TOSViolation
  NSFW
}

model ModelReport {
  id        Int          @id @default(autoincrement())
  modelId   Int
  model     Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime     @default(now())
}

model Review {
  id             Int           @id @default(autoincrement())
  model          Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int?
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  text           String?
  rating         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  nsfw           Boolean       @default(false)
  tosViolation   Boolean       @default(false)

  reactions       ReviewReaction[]
  imagesOnReviews ImagesOnReviews[]
  reports         ReviewReport[]
}

model ReviewReport {
  id        Int          @id @default(autoincrement())
  reviewId  Int
  review    Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime     @default(now())
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model ReviewReaction {
  id        Int             @id @default(autoincrement())
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    String?
  hash      String?
  height    Int?
  width     Int?
  nsfw      Boolean  @default(false)

  imagesOnModels  ImagesOnModels[]
  imagesOnReviews ImagesOnReviews[]
}

enum ImageOnModelType {
  Example
  Training
}

model ImagesOnModels {
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int
  index          Int?

  @@id([imageId, modelVersionId])
}

model ImagesOnReviews {
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  Int
  index    Int?

  @@id([imageId, reviewId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tagsOnModels TagsOnModels[]
}

model TagsOnModels {
  model   Model @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId Int
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   Int

  @@id([modelId, tagId])
}

model SavedModel {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([modelId, userId])
}

model KeyValue {
  key   String @id
  value Json
}

/// @view
model ModelRank {
  model                    Model @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId                  Int   @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
}

/// @view
model ModelVersionRank {
  modelVersion             ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: NoAction)
  modelVersionId           Int          @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
}
